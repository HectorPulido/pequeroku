openapi: 3.0.3
info:
  title: Pequeroku
  version: 1.0.0
  description: Easy way to share a piece of your machine...
paths:
  /api/api/ai/generate/:
    post:
      operationId: api_ai_generate_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prompt'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
          description: ''
  /api/containers/:
    get:
      operationId: containers_list
      description: |-
        Container CRUD and VM utilities.

        Notes on refactor:
        - Added Celery for heavy/non-critical path work (e.g., template application at create).
          Endpoints and contracts remain unchanged.
        - Extracted SSH/SFTP boilerplate into helpers for readability and uniform error handling.
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
          description: ''
    post:
      operationId: containers_create
      description: |-
        Instead of creating a Docker container, create DB record and boot a VM session.
        Quota is enforced. Optional default template can be applied (via Celery).
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/:
    get:
      operationId: containers_retrieve
      description: |-
        Container CRUD and VM utilities.

        Notes on refactor:
        - Added Celery for heavy/non-critical path work (e.g., template application at create).
          Endpoints and contracts remain unchanged.
        - Extracted SSH/SFTP boilerplate into helpers for readability and uniform error handling.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
    put:
      operationId: containers_update
      description: |-
        Container CRUD and VM utilities.

        Notes on refactor:
        - Added Celery for heavy/non-critical path work (e.g., template application at create).
          Endpoints and contracts remain unchanged.
        - Extracted SSH/SFTP boilerplate into helpers for readability and uniform error handling.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
    patch:
      operationId: containers_partial_update
      description: |-
        Container CRUD and VM utilities.

        Notes on refactor:
        - Added Celery for heavy/non-critical path work (e.g., template application at create).
          Endpoints and contracts remain unchanged.
        - Extracted SSH/SFTP boilerplate into helpers for readability and uniform error handling.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedContainer'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
    delete:
      operationId: containers_destroy
      description: Soft shutdown VM (best-effort) and remove DB record.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/containers/{id}/create_dir/:
    post:
      operationId: containers_create_dir_create
      description: |-
        Create a directory in the VM.
        JSON: { "path": "/app/new" }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/list_dir/:
    get:
      operationId: containers_list_dir_retrieve
      description: |-
        Recursively list (depth 2) using 'find', returning {path, name, type}.
        GET ?path=/app
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/power_off/:
    post:
      operationId: containers_power_off_create
      description: Stop VM via management command. Kept synchronous to preserve contract.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/power_on/:
    post:
      operationId: containers_power_on_create
      description: |-
        Start VM via management command. Kept synchronous to preserve the
        original response (status + log).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/read_file/:
    get:
      operationId: containers_read_file_retrieve
      description: |-
        Read a file via SFTP.
        GET ?path=/absolute/path
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/real_status/:
    get:
      operationId: containers_real_status_retrieve
      description: Sync and return the real status from the VM layer.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/restart_container/:
    post:
      operationId: containers_restart_container_create
      description: Reopen the shell channel for the VM (VM keeps running).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/send_command/:
    post:
      operationId: containers_send_command_create
      description: |-
        Sends a non-interactive command to the VM.
        Body: { "command": "ls -la" }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/upload_file/:
    post:
      operationId: containers_upload_file_create
      description: |-
        Upload a file via SFTP.
        form-data: file, dest_path (default /app)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/containers/{id}/write_file/:
    post:
      operationId: containers_write_file_create
      description: |-
        Create/Write a file.
        JSON: { "path": "/app/a.py", "content": "print(1)" }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this container.
        required: true
      tags:
      - containers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Container'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
          description: ''
  /api/login/:
    post:
      operationId: login_create
      description: Simple username/password login.
      tags:
      - login
      responses:
        '200':
          description: No response body
  /api/logout/:
    post:
      operationId: logout_create
      description: Simple logout for authenticated users.
      tags:
      - logout
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/:
    get:
      operationId: templates_list
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      tags:
      - templates
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileTemplate'
          description: ''
    post:
      operationId: templates_create
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileTemplate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTemplate'
          description: ''
  /api/templates/{id}/:
    get:
      operationId: templates_retrieve
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this file template.
        required: true
      tags:
      - templates
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTemplate'
          description: ''
    put:
      operationId: templates_update
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this file template.
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileTemplate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTemplate'
          description: ''
    patch:
      operationId: templates_partial_update
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this file template.
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFileTemplate'
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTemplate'
          description: ''
    delete:
      operationId: templates_destroy
      description: CRUD for file templates and the "apply" action to push a template
        into a container.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this file template.
        required: true
      tags:
      - templates
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/{id}/apply/:
    post:
      operationId: templates_apply_create
      description: |-
        Apply a template to a container.
        Body JSON:
        {
          "container_id": 123,
          "dest_path": "/app",  # optional
          "clean": true         # whether to remove previous content
        }

        Kept synchronous to preserve the original response (status + files_count).
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this file template.
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileTemplate'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTemplate'
          description: ''
  /api/user_data/:
    get:
      operationId: user_data_retrieve
      description: 'Read-only user info: username, quota and active containers count.'
      tags:
      - user_data
      security:
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Container:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        container_id:
          type: string
          maxLength: 64
        image:
          type: string
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          maxLength: 32
        user:
          type: integer
        username:
          type: string
          readOnly: true
      required:
      - container_id
      - created_at
      - id
      - user
      - username
    FileTemplate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/FileTemplateItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - items
      - name
      - slug
      - updated_at
    FileTemplateItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        path:
          type: string
          readOnly: true
        content:
          type: string
          readOnly: true
        mode:
          type: integer
          readOnly: true
        order:
          type: integer
          readOnly: true
      required:
      - content
      - id
      - mode
      - order
      - path
    PatchedContainer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        container_id:
          type: string
          maxLength: 64
        image:
          type: string
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          maxLength: 32
        user:
          type: integer
        username:
          type: string
          readOnly: true
    PatchedFileTemplate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        description:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/FileTemplateItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Prompt:
      type: object
      properties:
        prompt:
          type: string
          maxLength: 4000
      required:
      - prompt
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
